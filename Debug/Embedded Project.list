
Embedded Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ac  080044ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000080c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012ffb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002269  00000000  00000000  0003307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001098  00000000  00000000  000352e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d0a  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002518b  00000000  00000000  0003708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001207e  00000000  00000000  0005c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4859  00000000  00000000  0006e293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004824  00000000  00000000  00152aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00157310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004474 	.word	0x08004474

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004474 	.word	0x08004474

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <set_servo_angle1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void set_servo_angle1(uint16_t angle)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
  // Calculate PWM pulse width based on desired angle
  // Assuming 180-degree servo range and PWM pulse width range configured in MX_TIM2_Init()
  uint16_t pulse_width = 25 + ((angle * 10) / 18);
 80004f2:	88fa      	ldrh	r2, [r7, #6]
 80004f4:	4613      	mov	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <set_servo_angle1+0x3c>)
 80004fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000502:	1092      	asrs	r2, r2, #2
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b29b      	uxth	r3, r3
 800050a:	3319      	adds	r3, #25
 800050c:	81fb      	strh	r3, [r7, #14]
//  if (angle > 180) {
//    pulse_width = 25; // Set pulse width for 0 degree
//  }

  // Set PWM pulse width
  htim3.Instance->CCR1 = pulse_width;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <set_servo_angle1+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	89fa      	ldrh	r2, [r7, #14]
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	38e38e39 	.word	0x38e38e39
 8000528:	20000298 	.word	0x20000298

0800052c <set_servo_angle2>:
void set_servo_angle2(uint16_t angle)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
  // Calculate PWM pulse width based on desired angle
  // Assuming 180-degree servo range and PWM pulse width range configured in MX_TIM2_Init()
  uint16_t pulse_width = 25 + ((angle * 10) / 18);
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <set_servo_angle2+0x3c>)
 8000542:	fb82 1203 	smull	r1, r2, r2, r3
 8000546:	1092      	asrs	r2, r2, #2
 8000548:	17db      	asrs	r3, r3, #31
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b29b      	uxth	r3, r3
 800054e:	3319      	adds	r3, #25
 8000550:	81fb      	strh	r3, [r7, #14]
//  if (angle > 180) {
//    pulse_width = 25; // Set pulse width for 0 degree
//  }

  // Set PWM pulse width
  htim2.Instance->CCR1 = pulse_width;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <set_servo_angle2+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	89fa      	ldrh	r2, [r7, #14]
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	38e38e39 	.word	0x38e38e39
 800056c:	20000250 	.word	0x20000250

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fd89 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f83b 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa37 	bl	80009f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000582:	f000 f8a1 	bl	80006c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f9db 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800058a:	f000 fa03 	bl	8000994 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800058e:	f000 f8e9 	bl	8000764 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000592:	f000 f95d 	bl	8000850 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x7c>)
 800059a:	f002 fa5b 	bl	8002a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800059e:	2100      	movs	r1, #0
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0x80>)
 80005a2:	f002 fa57 	bl	8002a54 <HAL_TIM_PWM_Start>
//	  set_servo_angle(10);
//	  	  HAL_Delay(1000);
//	  	set_servo_angle(150);
//	  		  	  HAL_Delay(1000);
//	  set_servo_angle(0);
	  HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 fde1 	bl	8001170 <HAL_Delay>
	  int i = 180;
 80005ae:	23b4      	movs	r3, #180	; 0xb4
 80005b0:	607b      	str	r3, [r7, #4]
	  HAL_Delay(500);
 80005b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b6:	f000 fddb 	bl	8001170 <HAL_Delay>
	  while(i>=5){
 80005ba:	e00f      	b.n	80005dc <main+0x6c>
		  set_servo_angle1(i);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff91 	bl	80004e8 <set_servo_angle1>
		  set_servo_angle2(i);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffae 	bl	800052c <set_servo_angle2>
		  HAL_Delay(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f000 fdcd 	bl	8001170 <HAL_Delay>
		  i= i-2;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3b02      	subs	r3, #2
 80005da:	607b      	str	r3, [r7, #4]
	  while(i>=5){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b04      	cmp	r3, #4
 80005e0:	dcec      	bgt.n	80005bc <main+0x4c>
	  }
	  HAL_Delay(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 fdc3 	bl	8001170 <HAL_Delay>
  {
 80005ea:	e7dc      	b.n	80005a6 <main+0x36>
 80005ec:	20000298 	.word	0x20000298
 80005f0:	20000250 	.word	0x20000250

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ff09 	bl	800441a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000672:	2307      	movs	r3, #7
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fcaa 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000686:	f000 fa61 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff0b 	bl	80024c4 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 fa4a 	bl	8000b4c <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ETH_Init+0x84>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_ETH_Init+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_ETH_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ETH_Init+0x8c>)
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e0:	22e1      	movs	r2, #225	; 0xe1
 80006e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ETH_Init+0x8c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_ETH_Init+0x8c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ETH_Init+0x84>)
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_ETH_Init+0x8c>)
 80006fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ETH_Init+0x84>)
 80006fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000702:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ETH_Init+0x84>)
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_ETH_Init+0x90>)
 8000708:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ETH_Init+0x84>)
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_ETH_Init+0x94>)
 800070e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ETH_Init+0x84>)
 8000712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000716:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x84>)
 800071a:	f000 fe5f 	bl	80013dc <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 fa12 	bl	8000b4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000728:	2238      	movs	r2, #56	; 0x38
 800072a:	2100      	movs	r1, #0
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_ETH_Init+0x98>)
 800072e:	f003 fe74 	bl	800441a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_ETH_Init+0x98>)
 8000734:	2221      	movs	r2, #33	; 0x21
 8000736:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_ETH_Init+0x98>)
 800073a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800073e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_ETH_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001a0 	.word	0x200001a0
 8000750:	40028000 	.word	0x40028000
 8000754:	2000080c 	.word	0x2000080c
 8000758:	20000100 	.word	0x20000100
 800075c:	20000060 	.word	0x20000060
 8000760:	20000028 	.word	0x20000028

08000764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM2_Init+0xe8>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_TIM2_Init+0xe8>)
 800079e:	f44f 7252 	mov.w	r2, #840	; 0x348
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_TIM2_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_TIM2_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_TIM2_Init+0xe8>)
 80007c0:	f002 f8a0 	bl	8002904 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ca:	f000 f9bf 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d8:	4619      	mov	r1, r3
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_TIM2_Init+0xe8>)
 80007dc:	f002 fbb4 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007e6:	f000 f9b1 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ec:	f002 f8d9 	bl	80029a2 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007f6:	f000 f9a9 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_TIM2_Init+0xe8>)
 800080a:	f002 ffb3 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000814:	f000 f99a 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM2_Init+0xe8>)
 8000830:	f002 fac8 	bl	8002dc4 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800083a:	f000 f987 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM2_Init+0xe8>)
 8000840:	f000 fab4 	bl	8000dac <HAL_TIM_MspPostInit>

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000250 	.word	0x20000250

08000850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000882:	4a2e      	ldr	r2, [pc, #184]	; (800093c <MX_TIM3_Init+0xec>)
 8000884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000888:	f44f 7252 	mov.w	r2, #840	; 0x348
 800088c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_TIM3_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a8:	4823      	ldr	r0, [pc, #140]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008aa:	f002 f82b 	bl	8002904 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008b4:	f000 f94a 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008c6:	f002 fb3f 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008d0:	f000 f93c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008d6:	f002 f864 	bl	80029a2 <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008e0:	f000 f934 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008f4:	f002 ff3e 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008fe:	f000 f925 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	; 0x60
 8000904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM3_Init+0xe8>)
 800091a:	f002 fa53 	bl	8002dc4 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000924:	f000 f912 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM3_Init+0xe8>)
 800092a:	f000 fa3f 	bl	8000dac <HAL_TIM_MspPostInit>

}
 800092e:	bf00      	nop
 8000930:	3738      	adds	r7, #56	; 0x38
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000298 	.word	0x20000298
 800093c:	40000400 	.word	0x40000400

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART3_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART3_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x4c>)
 8000978:	f002 ff8c 	bl	8003894 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8e3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200002e0 	.word	0x200002e0
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	f001 f9ed 	bl	8001db6 <HAL_PCD_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f8b3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000328 	.word	0x20000328

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a3d      	ldr	r2, [pc, #244]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ab4:	4822      	ldr	r0, [pc, #136]	; (8000b40 <MX_GPIO_Init+0x150>)
 8000ab6:	f001 f965 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	4821      	ldr	r0, [pc, #132]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000ac0:	f001 f960 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481b      	ldr	r0, [pc, #108]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000adc:	f000 ffa6 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ae0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_GPIO_Init+0x150>)
 8000afa:	f000 ff97 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000b16:	f000 ff89 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000b2e:	f000 ff7d 	bl	8001a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	3730      	adds	r7, #48	; 0x30
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40021800 	.word	0x40021800
 8000b48:	40020800 	.word	0x40020800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a55      	ldr	r2, [pc, #340]	; (8000d1c <HAL_ETH_MspInit+0x174>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	f040 80a4 	bne.w	8000d14 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a52      	ldr	r2, [pc, #328]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a4b      	ldr	r2, [pc, #300]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c90:	2332      	movs	r3, #50	; 0x32
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <HAL_ETH_MspInit+0x17c>)
 8000cac:	f000 febe 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb0:	2386      	movs	r3, #134	; 0x86
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <HAL_ETH_MspInit+0x180>)
 8000ccc:	f000 feae 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <HAL_ETH_MspInit+0x184>)
 8000cee:	f000 fe9d 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d04:	230b      	movs	r3, #11
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000d10:	f000 fe8c 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40028000 	.word	0x40028000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40021800 	.word	0x40021800

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d44:	d116      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	201c      	movs	r0, #28
 8000d68:	f000 fb01 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d6c:	201c      	movs	r0, #28
 8000d6e:	f000 fb1a 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d72:	e012      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_TIM_Base_MspInit+0x74>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10d      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_TIM_Base_MspInit+0x70>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40000400 	.word	0x40000400

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d11e      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4816      	ldr	r0, [pc, #88]	; (8000e60 <HAL_TIM_MspPostInit+0xb4>)
 8000e06:	f000 fe11 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e0a:	e022      	b.n	8000e52 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d11d      	bne.n	8000e52 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_TIM_MspPostInit+0xb0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <HAL_TIM_MspPostInit+0xb4>)
 8000e4e:	f000 fded 	bl	8001a2c <HAL_GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40000400 	.word	0x40000400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_UART_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000ee0:	f000 fda4 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004800 	.word	0x40004800
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020c00 	.word	0x40020c00

08000ef8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f18:	d13f      	bne.n	8000f9a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <HAL_PCD_MspInit+0xb0>)
 8000f54:	f000 fd6a 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <HAL_PCD_MspInit+0xb0>)
 8000f6e:	f000 fd5d 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_PCD_MspInit+0xac>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f89a 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM2_IRQHandler+0x10>)
 8001006:	f001 fded 	bl	8002be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000250 	.word	0x20000250

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800103c:	f7ff ffea 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 f9e1 	bl	800442c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fa81 	bl	8000570 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800107c:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8001080:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001084:	20000818 	.word	0x20000818

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_Init+0x40>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_Init+0x40>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x40>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f94f 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fd4a 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f967 	bl	80013c2 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f92f 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	20000814 	.word	0x20000814

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000814 	.word	0x20000814

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff29 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff3e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff31 	bl	800121c <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06c      	b.n	80014c8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2223      	movs	r2, #35	; 0x23
 80013fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fbd1 	bl	8000ba8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <HAL_ETH_Init+0xf4>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a30      	ldr	r2, [pc, #192]	; (80014d0 <HAL_ETH_Init+0xf4>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <HAL_ETH_Init+0xf4>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_ETH_Init+0xf8>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <HAL_ETH_Init+0xf8>)
 8001428:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800142c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_ETH_Init+0xf8>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_ETH_Init+0xf8>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_ETH_Init+0xf8>)
 800143e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff fe7e 	bl	8001158 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800145e:	e011      	b.n	8001484 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001460:	f7ff fe7a 	bl	8001158 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800146e:	d909      	bls.n	8001484 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2204      	movs	r2, #4
 8001474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	22e0      	movs	r2, #224	; 0xe0
 800147c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e021      	b.n	80014c8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e4      	bne.n	8001460 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f958 	bl	800174c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f9ff 	bl	80018a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fa55 	bl	8001952 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f9bd 	bl	8001830 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2210      	movs	r2, #16
 80014c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800

080014d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <ETH_SetMACConfig+0x15c>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	7c1b      	ldrb	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <ETH_SetMACConfig+0x28>
 80014fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014fe:	e000      	b.n	8001502 <ETH_SetMACConfig+0x2a>
 8001500:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7c5b      	ldrb	r3, [r3, #17]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetMACConfig+0x38>
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	e000      	b.n	8001512 <ETH_SetMACConfig+0x3a>
 8001510:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001512:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001518:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001520:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	7f92      	ldrb	r2, [r2, #30]
 800152c:	2a00      	cmp	r2, #0
 800152e:	d102      	bne.n	8001536 <ETH_SetMACConfig+0x5e>
 8001530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001534:	e000      	b.n	8001538 <ETH_SetMACConfig+0x60>
 8001536:	2200      	movs	r2, #0
                        macconf->Speed |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001540:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800154e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001556:	2a00      	cmp	r2, #0
 8001558:	d102      	bne.n	8001560 <ETH_SetMACConfig+0x88>
 800155a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155e:	e000      	b.n	8001562 <ETH_SetMACConfig+0x8a>
 8001560:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001562:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	7bdb      	ldrb	r3, [r3, #15]
 8001568:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800156a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001578:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800157a:	4313      	orrs	r3, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fdec 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015ae:	4013      	ands	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d101      	bne.n	80015c6 <ETH_SetMACConfig+0xee>
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	e000      	b.n	80015c8 <ETH_SetMACConfig+0xf0>
 80015c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015d6:	2a01      	cmp	r2, #1
 80015d8:	d101      	bne.n	80015de <ETH_SetMACConfig+0x106>
 80015da:	2208      	movs	r2, #8
 80015dc:	e000      	b.n	80015e0 <ETH_SetMACConfig+0x108>
 80015de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015e8:	2a01      	cmp	r2, #1
 80015ea:	d101      	bne.n	80015f0 <ETH_SetMACConfig+0x118>
 80015ec:	2204      	movs	r2, #4
 80015ee:	e000      	b.n	80015f2 <ETH_SetMACConfig+0x11a>
 80015f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015fa:	2a01      	cmp	r2, #1
 80015fc:	d101      	bne.n	8001602 <ETH_SetMACConfig+0x12a>
 80015fe:	2202      	movs	r2, #2
 8001600:	e000      	b.n	8001604 <ETH_SetMACConfig+0x12c>
 8001602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001604:	4313      	orrs	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fda7 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	ff20810f 	.word	0xff20810f

08001638 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <ETH_SetDMAConfig+0x110>)
 8001652:	4013      	ands	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7b1b      	ldrb	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <ETH_SetDMAConfig+0x2c>
 800165e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001662:	e000      	b.n	8001666 <ETH_SetDMAConfig+0x2e>
 8001664:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	7b5b      	ldrb	r3, [r3, #13]
 800166a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800166c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	7f52      	ldrb	r2, [r2, #29]
 8001672:	2a00      	cmp	r2, #0
 8001674:	d102      	bne.n	800167c <ETH_SetDMAConfig+0x44>
 8001676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800167a:	e000      	b.n	800167e <ETH_SetDMAConfig+0x46>
 800167c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800167e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	7b9b      	ldrb	r3, [r3, #14]
 8001684:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001686:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800168c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7f1b      	ldrb	r3, [r3, #28]
 8001692:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001694:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7f9b      	ldrb	r3, [r3, #30]
 800169a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800169c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fd4e 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001700:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001702:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800170a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001710:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800171a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fd1f 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	f8de3f23 	.word	0xf8de3f23

0800174c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0a6      	sub	sp, #152	; 0x98
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001788:	2300      	movs	r3, #0
 800178a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001792:	2300      	movs	r3, #0
 8001794:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fe86 	bl	80014d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001800:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001806:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff08 	bl	8001638 <ETH_SetDMAConfig>
}
 8001828:	bf00      	nop
 800182a:	3798      	adds	r7, #152	; 0x98
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3305      	adds	r3, #5
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	3204      	adds	r2, #4
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <ETH_MACAddressConfig+0x68>)
 8001852:	4413      	add	r3, r2
 8001854:	461a      	mov	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3302      	adds	r3, #2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4313      	orrs	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <ETH_MACAddressConfig+0x6c>)
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40028040 	.word	0x40028040
 800189c:	40028044 	.word	0x40028044

080018a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e03e      	b.n	800192c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	3206      	adds	r2, #6
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d80c      	bhi.n	8001910 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	461a      	mov	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e004      	b.n	800191a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d9bd      	bls.n	80018ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	611a      	str	r2, [r3, #16]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e046      	b.n	80019ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6919      	ldr	r1, [r3, #16]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800199c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	3212      	adds	r2, #18
 80019ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d80c      	bhi.n	80019de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6919      	ldr	r1, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e004      	b.n	80019e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d9b5      	bls.n	8001960 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	60da      	str	r2, [r3, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e177      	b.n	8001d38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 8166 	bne.w	8001d32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80c0 	beq.w	8001d32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bce:	4a61      	ldr	r2, [pc, #388]	; (8001d54 <HAL_GPIO_Init+0x328>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_GPIO_Init+0x32c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d037      	beq.n	8001c6a <HAL_GPIO_Init+0x23e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a57      	ldr	r2, [pc, #348]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d031      	beq.n	8001c66 <HAL_GPIO_Init+0x23a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02b      	beq.n	8001c62 <HAL_GPIO_Init+0x236>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <HAL_GPIO_Init+0x338>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x232>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_GPIO_Init+0x33c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x22e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <HAL_GPIO_Init+0x340>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x22a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x344>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x226>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_GPIO_Init+0x348>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x222>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_GPIO_Init+0x34c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x21e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001c42:	2309      	movs	r3, #9
 8001c44:	e012      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c46:	230a      	movs	r3, #10
 8001c48:	e010      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	e00e      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c4e:	2307      	movs	r3, #7
 8001c50:	e00c      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c52:	2306      	movs	r3, #6
 8001c54:	e00a      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c56:	2305      	movs	r3, #5
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x240>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7c:	4935      	ldr	r1, [pc, #212]	; (8001d54 <HAL_GPIO_Init+0x328>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cae:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd8:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_GPIO_Init+0x354>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	f67f ae84 	bls.w	8001a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40021c00 	.word	0x40021c00
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40022400 	.word	0x40022400
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af02      	add	r7, sp, #8
 8001dbc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e101      	b.n	8001fcc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff f888 	bl	8000ef8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df6:	d102      	bne.n	8001dfe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 f86e 	bl	8003ee4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7c1a      	ldrb	r2, [r3, #16]
 8001e10:	f88d 2000 	strb.w	r2, [sp]
 8001e14:	3304      	adds	r3, #4
 8001e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e18:	f002 f800 	bl	8003e1c <USB_CoreInit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0ce      	b.n	8001fcc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 f866 	bl	8003f06 <USB_SetCurrentMode>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0bf      	b.n	8001fcc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e04a      	b.n	8001ee8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3315      	adds	r3, #21
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	3314      	adds	r3, #20
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	b298      	uxth	r0, r3
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	332e      	adds	r3, #46	; 0x2e
 8001e8e:	4602      	mov	r2, r0
 8001e90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	331c      	adds	r3, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3320      	adds	r3, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3324      	adds	r3, #36	; 0x24
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3af      	bcc.n	8001e52 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e044      	b.n	8001f82 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b5      	bcc.n	8001ef8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7c1a      	ldrb	r2, [r3, #16]
 8001f94:	f88d 2000 	strb.w	r2, [sp]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f9c:	f002 f800 	bl	8003fa0 <USB_DevInit>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00c      	b.n	8001fcc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 f9c8 	bl	800435a <USB_DevDisconnect>

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e267      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b82      	ldr	r3, [pc, #520]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e242      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6f      	ldr	r2, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a68      	ldr	r2, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f864 	bl	8001158 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff f860 	bl	8001158 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e207      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff f850 	bl	8001158 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f84c 	bl	8001158 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f3      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c7      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f805 	bl	8001158 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff f801 	bl	8001158 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a8      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4925      	ldr	r1, [pc, #148]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe ffe4 	bl	8001158 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe ffe0 	bl	8001158 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e187      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d036      	beq.n	800222c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe ffc4 	bl	8001158 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe ffc0 	bl	8001158 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e167      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e01b      	b.n	800222c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe ffad 	bl	8001158 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e00e      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe ffa9 	bl	8001158 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d907      	bls.n	8002220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e150      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002214:	40023800 	.word	0x40023800
 8002218:	42470000 	.word	0x42470000
 800221c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ea      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8097 	beq.w	8002368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a73      	ldr	r2, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe ff69 	bl	8001158 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe ff65 	bl	8001158 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e10c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x2ea>
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a63      	ldr	r2, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	e01c      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x30c>
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a54      	ldr	r2, [pc, #336]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d015      	beq.n	800232c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe ff2a 	bl	8001158 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	e00a      	b.n	800231e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7fe ff26 	bl	8001158 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0cb      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ee      	beq.n	8002308 <HAL_RCC_OscConfig+0x334>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7fe ff14 	bl	8001158 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe ff10 	bl	8001158 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0b5      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ee      	bne.n	8002334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a1 	beq.w	80024b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d05c      	beq.n	8002438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d141      	bne.n	800240a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x478>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fee4 	bl	8001158 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fee0 	bl	8001158 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e087      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x478>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe feb9 	bl	8001158 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe feb5 	bl	8001158 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e05c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x416>
 8002408:	e054      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x478>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fea2 	bl	8001158 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fe9e 	bl	8001158 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e045      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
 8002436:	e03d      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e038      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000
 800244c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d028      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d121      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fdd0 	bl	8001158 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fdcc 	bl	8001158 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd30 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	0800448c 	.word	0x0800448c
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b094      	sub	sp, #80	; 0x50
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80e1 	bhi.w	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0db      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026c8:	e0db      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_GetSysClockFreq+0x208>)
 80026cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ce:	e0d8      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
 80026fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002734:	4659      	mov	r1, fp
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4651      	mov	r1, sl
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4651      	mov	r1, sl
 8002744:	ebb2 0801 	subs.w	r8, r2, r1
 8002748:	4659      	mov	r1, fp
 800274a:	eb63 0901 	sbc.w	r9, r3, r1
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002762:	4690      	mov	r8, r2
 8002764:	4699      	mov	r9, r3
 8002766:	4623      	mov	r3, r4
 8002768:	eb18 0303 	adds.w	r3, r8, r3
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	462b      	mov	r3, r5
 8002770:	eb49 0303 	adc.w	r3, r9, r3
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002782:	4629      	mov	r1, r5
 8002784:	024b      	lsls	r3, r1, #9
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278c:	4621      	mov	r1, r4
 800278e:	024a      	lsls	r2, r1, #9
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800279c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a0:	f7fd fd24 	bl	80001ec <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	e058      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	4611      	mov	r1, r2
 80027ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4641      	mov	r1, r8
 80027e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002800:	ebb2 040a 	subs.w	r4, r2, sl
 8002804:	eb63 050b 	sbc.w	r5, r3, fp
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	00eb      	lsls	r3, r5, #3
 8002812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002816:	00e2      	lsls	r2, r4, #3
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4643      	mov	r3, r8
 800281e:	18e3      	adds	r3, r4, r3
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	464b      	mov	r3, r9
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002836:	4629      	mov	r1, r5
 8002838:	028b      	lsls	r3, r1, #10
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002840:	4621      	mov	r1, r4
 8002842:	028a      	lsls	r2, r1, #10
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	61fa      	str	r2, [r7, #28]
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	f7fd fcca 	bl	80001ec <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002884:	4618      	mov	r0, r3
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	0800449c 	.word	0x0800449c

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	0800449c 	.word	0x0800449c

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fa02 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fbfa 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e041      	b.n	8002a38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f839 	bl	8002a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fbab 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x24>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e022      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d109      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x3e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e015      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d109      	bne.n	8002aac <HAL_TIM_PWM_Start+0x58>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07c      	b.n	8002bc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x82>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad4:	e013      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x92>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	e00b      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xa2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af4:	e003      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fe0e 	bl	8003728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2d      	ldr	r2, [pc, #180]	; (8002bc8 <HAL_TIM_PWM_Start+0x174>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_PWM_Start+0xcc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <HAL_TIM_PWM_Start+0x178>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_PWM_Start+0xd0>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_TIM_PWM_Start+0xd2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_TIM_PWM_Start+0x174>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d01d      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <HAL_TIM_PWM_Start+0x17c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_TIM_PWM_Start+0x180>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_TIM_PWM_Start+0x184>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_TIM_PWM_Start+0x178>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_TIM_PWM_Start+0x188>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x136>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_TIM_PWM_Start+0x18c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d111      	bne.n	8002bae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d010      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	e007      	b.n	8002bbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40010400 	.word	0x40010400
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40001800 	.word	0x40001800

08002be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0202 	mvn.w	r2, #2
 8002c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa65 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa57 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa68 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0204 	mvn.w	r2, #4
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa3f 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa31 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fa42 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0208 	mvn.w	r2, #8
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa19 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa0b 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa1c 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d020      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01b      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0210 	mvn.w	r2, #16
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2208      	movs	r2, #8
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9f3 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9e5 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f9f6 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0201 	mvn.w	r2, #1
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9c3 	bl	80030d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fd86 	bl	8003880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9c7 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0220 	mvn.w	r2, #32
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fd58 	bl	800386c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ae      	b.n	8002f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	f200 809f 	bhi.w	8002f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002f31 	.word	0x08002f31
 8002e00:	08002f31 	.word	0x08002f31
 8002e04:	08002f31 	.word	0x08002f31
 8002e08:	08002e6d 	.word	0x08002e6d
 8002e0c:	08002f31 	.word	0x08002f31
 8002e10:	08002f31 	.word	0x08002f31
 8002e14:	08002f31 	.word	0x08002f31
 8002e18:	08002eaf 	.word	0x08002eaf
 8002e1c:	08002f31 	.word	0x08002f31
 8002e20:	08002f31 	.word	0x08002f31
 8002e24:	08002f31 	.word	0x08002f31
 8002e28:	08002eef 	.word	0x08002eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fa2e 	bl	8003294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
      break;
 8002e6a:	e064      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa7e 	bl	8003374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6999      	ldr	r1, [r3, #24]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]
      break;
 8002eac:	e043      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fad3 	bl	8003460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0208 	orr.w	r2, r2, #8
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0204 	bic.w	r2, r2, #4
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
      break;
 8002eec:	e023      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fb27 	bl	8003548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	021a      	lsls	r2, r3, #8
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	61da      	str	r2, [r3, #28]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIM_ConfigClockSource+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e0b4      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x186>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9c:	d03e      	beq.n	800301c <HAL_TIM_ConfigClockSource+0xd4>
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	f200 8087 	bhi.w	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	f000 8086 	beq.w	80030ba <HAL_TIM_ConfigClockSource+0x172>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d87f      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d01a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0xa6>
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d87b      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b60      	cmp	r3, #96	; 0x60
 8002fbe:	d050      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x11a>
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
 8002fc2:	d877      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b50      	cmp	r3, #80	; 0x50
 8002fc6:	d03c      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xfa>
 8002fc8:	2b50      	cmp	r3, #80	; 0x50
 8002fca:	d873      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d058      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x13a>
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d86f      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	d064      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15a>
 8002fd8:	2b30      	cmp	r3, #48	; 0x30
 8002fda:	d86b      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d060      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15a>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d867      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d05c      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15a>
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d05a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15a>
 8002fec:	e062      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ffe:	f000 fb73 	bl	80036e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]
      break;
 800301a:	e04f      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800302c:	f000 fb5c 	bl	80036e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303e:	609a      	str	r2, [r3, #8]
      break;
 8003040:	e03c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	461a      	mov	r2, r3
 8003050:	f000 fad0 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2150      	movs	r1, #80	; 0x50
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fb29 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8003060:	e02c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800306e:	461a      	mov	r2, r3
 8003070:	f000 faef 	bl	8003652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2160      	movs	r1, #96	; 0x60
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fb19 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8003080:	e01c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	461a      	mov	r2, r3
 8003090:	f000 fab0 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb09 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f000 fb00 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80030b2:	e003      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a46      	ldr	r2, [pc, #280]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a43      	ldr	r2, [pc, #268]	; (800326c <TIM_Base_SetConfig+0x130>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a42      	ldr	r2, [pc, #264]	; (8003270 <TIM_Base_SetConfig+0x134>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a41      	ldr	r2, [pc, #260]	; (8003274 <TIM_Base_SetConfig+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a40      	ldr	r2, [pc, #256]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a35      	ldr	r2, [pc, #212]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d027      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a32      	ldr	r2, [pc, #200]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d023      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a31      	ldr	r2, [pc, #196]	; (8003270 <TIM_Base_SetConfig+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <TIM_Base_SetConfig+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2e      	ldr	r2, [pc, #184]	; (800327c <TIM_Base_SetConfig+0x140>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <TIM_Base_SetConfig+0x144>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <TIM_Base_SetConfig+0x148>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <TIM_Base_SetConfig+0x14c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <TIM_Base_SetConfig+0x150>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a29      	ldr	r2, [pc, #164]	; (8003290 <TIM_Base_SetConfig+0x154>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
  }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40010400 	.word	0x40010400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800
 8003288:	40001800 	.word	0x40001800
 800328c:	40001c00 	.word	0x40001c00
 8003290:	40002000 	.word	0x40002000

08003294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f023 0201 	bic.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 0302 	bic.w	r3, r3, #2
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a20      	ldr	r2, [pc, #128]	; (800336c <TIM_OC1_SetConfig+0xd8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_OC1_SetConfig+0x64>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <TIM_OC1_SetConfig+0xdc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <TIM_OC1_SetConfig+0xd8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC1_SetConfig+0x8e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <TIM_OC1_SetConfig+0xdc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400

08003374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0210 	bic.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0320 	bic.w	r3, r3, #32
 80033be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <TIM_OC2_SetConfig+0xe4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_OC2_SetConfig+0x68>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a21      	ldr	r2, [pc, #132]	; (800345c <TIM_OC2_SetConfig+0xe8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10d      	bne.n	80033f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <TIM_OC2_SetConfig+0xe4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC2_SetConfig+0x94>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a16      	ldr	r2, [pc, #88]	; (800345c <TIM_OC2_SetConfig+0xe8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d113      	bne.n	8003430 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800340e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <TIM_OC3_SetConfig+0xe0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC3_SetConfig+0x66>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a20      	ldr	r2, [pc, #128]	; (8003544 <TIM_OC3_SetConfig+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <TIM_OC3_SetConfig+0xe0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC3_SetConfig+0x92>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <TIM_OC3_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000
 8003544:	40010400 	.word	0x40010400

08003548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <TIM_OC4_SetConfig+0xa4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_OC4_SetConfig+0x68>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <TIM_OC4_SetConfig+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010400 	.word	0x40010400

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 0210 	bic.w	r2, r3, #16
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2201      	movs	r2, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e05a      	b.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a21      	ldr	r2, [pc, #132]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d01d      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1a      	ldr	r2, [pc, #104]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10c      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4313      	orrs	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40010400 	.word	0x40010400
 8003864:	40014000 	.word	0x40014000
 8003868:	40001800 	.word	0x40001800

0800386c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e042      	b.n	800392c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fad4 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f82b 	bl	8003934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800390c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b0c0      	sub	sp, #256	; 0x100
 800393a:	af00      	add	r7, sp, #0
 800393c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	68d9      	ldr	r1, [r3, #12]
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	ea40 0301 	orr.w	r3, r0, r1
 800395c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	431a      	orrs	r2, r3
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800398c:	f021 010c 	bic.w	r1, r1, #12
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800399a:	430b      	orrs	r3, r1
 800399c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	6999      	ldr	r1, [r3, #24]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	ea40 0301 	orr.w	r3, r0, r1
 80039ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <UART_SetConfig+0x2cc>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d005      	beq.n	80039d4 <UART_SetConfig+0xa0>
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b8d      	ldr	r3, [pc, #564]	; (8003c04 <UART_SetConfig+0x2d0>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d104      	bne.n	80039de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d4:	f7fe ff82 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80039d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039dc:	e003      	b.n	80039e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039de:	f7fe ff69 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80039e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	f040 810c 	bne.w	8003c0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	1891      	adds	r1, r2, r2
 8003a0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a16:	4621      	mov	r1, r4
 8003a18:	eb12 0801 	adds.w	r8, r2, r1
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb43 0901 	adc.w	r9, r3, r1
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a44:	462b      	mov	r3, r5
 8003a46:	eb49 0303 	adc.w	r3, r9, r3
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a62:	460b      	mov	r3, r1
 8003a64:	18db      	adds	r3, r3, r3
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	4613      	mov	r3, r2
 8003a6a:	eb42 0303 	adc.w	r3, r2, r3
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a78:	f7fc fbb8 	bl	80001ec <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aac:	4641      	mov	r1, r8
 8003aae:	eb12 0a01 	adds.w	sl, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003acc:	4692      	mov	sl, r2
 8003ace:	469b      	mov	fp, r3
 8003ad0:	4643      	mov	r3, r8
 8003ad2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ada:	464b      	mov	r3, r9
 8003adc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003af8:	460b      	mov	r3, r1
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
 8003afe:	4613      	mov	r3, r2
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	647b      	str	r3, [r7, #68]	; 0x44
 8003b06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b0e:	f7fc fb6d 	bl	80001ec <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2264      	movs	r2, #100	; 0x64
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	1acb      	subs	r3, r1, r3
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003b30:	fba3 2302 	umull	r2, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b3c:	441c      	add	r4, r3
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6339      	str	r1, [r7, #48]	; 0x30
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b94:	464b      	mov	r3, r9
 8003b96:	460a      	mov	r2, r1
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	18db      	adds	r3, r3, r3
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	4613      	mov	r3, r2
 8003bbc:	eb42 0303 	adc.w	r3, r2, r3
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bca:	f7fc fb0f 	bl	80001ec <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2164      	movs	r1, #100	; 0x64
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	3332      	adds	r3, #50	; 0x32
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f003 0207 	and.w	r2, r3, #7
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4422      	add	r2, r4
 8003bfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bfc:	e106      	b.n	8003e0c <UART_SetConfig+0x4d8>
 8003bfe:	bf00      	nop
 8003c00:	40011000 	.word	0x40011000
 8003c04:	40011400 	.word	0x40011400
 8003c08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c1e:	4642      	mov	r2, r8
 8003c20:	464b      	mov	r3, r9
 8003c22:	1891      	adds	r1, r2, r2
 8003c24:	6239      	str	r1, [r7, #32]
 8003c26:	415b      	adcs	r3, r3
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c2e:	4641      	mov	r1, r8
 8003c30:	1854      	adds	r4, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb43 0501 	adc.w	r5, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	00eb      	lsls	r3, r5, #3
 8003c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c46:	00e2      	lsls	r2, r4, #3
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	4643      	mov	r3, r8
 8003c4e:	18e3      	adds	r3, r4, r3
 8003c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c54:	464b      	mov	r3, r9
 8003c56:	eb45 0303 	adc.w	r3, r5, r3
 8003c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	008b      	lsls	r3, r1, #2
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c84:	4621      	mov	r1, r4
 8003c86:	008a      	lsls	r2, r1, #2
 8003c88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c8c:	f7fc faae 	bl	80001ec <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003c96:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	011c      	lsls	r4, r3, #4
 8003c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ca8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	61b9      	str	r1, [r7, #24]
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6139      	str	r1, [r7, #16]
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d18:	4649      	mov	r1, r9
 8003d1a:	008b      	lsls	r3, r1, #2
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d22:	4641      	mov	r1, r8
 8003d24:	008a      	lsls	r2, r1, #2
 8003d26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d2a:	f7fc fa5f 	bl	80001ec <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003d36:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2264      	movs	r2, #100	; 0x64
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	1acb      	subs	r3, r1, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	441c      	add	r4, r3
 8003d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d5e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	1891      	adds	r1, r2, r2
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	415b      	adcs	r3, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d74:	4641      	mov	r1, r8
 8003d76:	1851      	adds	r1, r2, r1
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	414b      	adcs	r3, r1
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	00cb      	lsls	r3, r1, #3
 8003d90:	4651      	mov	r1, sl
 8003d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d96:	4651      	mov	r1, sl
 8003d98:	00ca      	lsls	r2, r1, #3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4642      	mov	r2, r8
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da6:	464b      	mov	r3, r9
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dba:	667a      	str	r2, [r7, #100]	; 0x64
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dc8:	4649      	mov	r1, r9
 8003dca:	008b      	lsls	r3, r1, #2
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	008a      	lsls	r2, r1, #2
 8003dd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dda:	f7fc fa07 	bl	80001ec <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4422      	add	r2, r4
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e12:	46bd      	mov	sp, r7
 8003e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	f107 001c 	add.w	r0, r7, #28
 8003e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d123      	bne.n	8003e7e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 faa0 	bl	80043b8 <USB_CoreReset>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e01b      	b.n	8003eb6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa94 	bl	80043b8 <USB_CoreReset>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea8:	e005      	b.n	8003eb6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003eb6:	7fbb      	ldrb	r3, [r7, #30]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d10b      	bne.n	8003ed4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f043 0206 	orr.w	r2, r3, #6
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ee0:	b004      	add	sp, #16
 8003ee2:	4770      	bx	lr

08003ee4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 0201 	bic.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d115      	bne.n	8003f54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f34:	200a      	movs	r0, #10
 8003f36:	f7fd f91b 	bl	8001170 <HAL_Delay>
      ms += 10U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	330a      	adds	r3, #10
 8003f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa2b 	bl	800439c <USB_GetMode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d01e      	beq.n	8003f8a <USB_SetCurrentMode+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2bc7      	cmp	r3, #199	; 0xc7
 8003f50:	d9f0      	bls.n	8003f34 <USB_SetCurrentMode+0x2e>
 8003f52:	e01a      	b.n	8003f8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f66:	200a      	movs	r0, #10
 8003f68:	f7fd f902 	bl	8001170 <HAL_Delay>
      ms += 10U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	330a      	adds	r3, #10
 8003f70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa12 	bl	800439c <USB_GetMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <USB_SetCurrentMode+0x84>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2bc7      	cmp	r3, #199	; 0xc7
 8003f82:	d9f0      	bls.n	8003f66 <USB_SetCurrentMode+0x60>
 8003f84:	e001      	b.n	8003f8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e005      	b.n	8003f96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f8e:	d101      	bne.n	8003f94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e009      	b.n	8003fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	2200      	movs	r2, #0
 8003fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b0e      	cmp	r3, #14
 8003fd8:	d9f2      	bls.n	8003fc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11c      	bne.n	800401c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38
 800401a:	e00b      	b.n	8004034 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800403a:	461a      	mov	r2, r3
 800403c:	2300      	movs	r3, #0
 800403e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004040:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10d      	bne.n	8004064 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004050:	2100      	movs	r1, #0
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f968 	bl	8004328 <USB_SetDevSpeed>
 8004058:	e008      	b.n	800406c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800405a:	2101      	movs	r1, #1
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f963 	bl	8004328 <USB_SetDevSpeed>
 8004062:	e003      	b.n	800406c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004064:	2103      	movs	r1, #3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f95e 	bl	8004328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800406c:	2110      	movs	r1, #16
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8fa 	bl	8004268 <USB_FlushTxFifo>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f924 	bl	80042cc <USB_FlushRxFifo>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	461a      	mov	r2, r3
 80040a2:	2300      	movs	r3, #0
 80040a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e043      	b.n	8004140 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ce:	d118      	bne.n	8004102 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	461a      	mov	r2, r3
 80040e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e013      	b.n	8004114 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e008      	b.n	8004114 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	461a      	mov	r2, r3
 8004110:	2300      	movs	r3, #0
 8004112:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004138:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004144:	461a      	mov	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4293      	cmp	r3, r2
 800414a:	d3b5      	bcc.n	80040b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e043      	b.n	80041da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004168:	d118      	bne.n	800419c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e013      	b.n	80041ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	461a      	mov	r2, r3
 8004194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e008      	b.n	80041ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3301      	adds	r3, #1
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041de:	461a      	mov	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d3b5      	bcc.n	8004152 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004206:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f043 0210 	orr.w	r2, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <USB_DevInit+0x2c4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f043 0208 	orr.w	r2, r3, #8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800423c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004260:	b004      	add	sp, #16
 8004262:	4770      	bx	lr
 8004264:	803c3800 	.word	0x803c3800

08004268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004282:	d901      	bls.n	8004288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e01b      	b.n	80042c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	daf2      	bge.n	8004276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	019b      	lsls	r3, r3, #6
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042ac:	d901      	bls.n	80042b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e006      	b.n	80042c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d0f0      	beq.n	80042a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042e4:	d901      	bls.n	80042ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e018      	b.n	800431c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	daf2      	bge.n	80042d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2210      	movs	r2, #16
 80042fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004308:	d901      	bls.n	800430e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e006      	b.n	800431c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b10      	cmp	r3, #16
 8004318:	d0f0      	beq.n	80042fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0301 	and.w	r3, r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043d0:	d901      	bls.n	80043d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e01b      	b.n	800440e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	daf2      	bge.n	80043c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043fa:	d901      	bls.n	8004400 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e006      	b.n	800440e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d0f0      	beq.n	80043ee <USB_CoreReset+0x36>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <memset>:
 800441a:	4402      	add	r2, r0
 800441c:	4603      	mov	r3, r0
 800441e:	4293      	cmp	r3, r2
 8004420:	d100      	bne.n	8004424 <memset+0xa>
 8004422:	4770      	bx	lr
 8004424:	f803 1b01 	strb.w	r1, [r3], #1
 8004428:	e7f9      	b.n	800441e <memset+0x4>
	...

0800442c <__libc_init_array>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	4d0d      	ldr	r5, [pc, #52]	; (8004464 <__libc_init_array+0x38>)
 8004430:	4c0d      	ldr	r4, [pc, #52]	; (8004468 <__libc_init_array+0x3c>)
 8004432:	1b64      	subs	r4, r4, r5
 8004434:	10a4      	asrs	r4, r4, #2
 8004436:	2600      	movs	r6, #0
 8004438:	42a6      	cmp	r6, r4
 800443a:	d109      	bne.n	8004450 <__libc_init_array+0x24>
 800443c:	4d0b      	ldr	r5, [pc, #44]	; (800446c <__libc_init_array+0x40>)
 800443e:	4c0c      	ldr	r4, [pc, #48]	; (8004470 <__libc_init_array+0x44>)
 8004440:	f000 f818 	bl	8004474 <_init>
 8004444:	1b64      	subs	r4, r4, r5
 8004446:	10a4      	asrs	r4, r4, #2
 8004448:	2600      	movs	r6, #0
 800444a:	42a6      	cmp	r6, r4
 800444c:	d105      	bne.n	800445a <__libc_init_array+0x2e>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	f855 3b04 	ldr.w	r3, [r5], #4
 8004454:	4798      	blx	r3
 8004456:	3601      	adds	r6, #1
 8004458:	e7ee      	b.n	8004438 <__libc_init_array+0xc>
 800445a:	f855 3b04 	ldr.w	r3, [r5], #4
 800445e:	4798      	blx	r3
 8004460:	3601      	adds	r6, #1
 8004462:	e7f2      	b.n	800444a <__libc_init_array+0x1e>
 8004464:	080044ac 	.word	0x080044ac
 8004468:	080044ac 	.word	0x080044ac
 800446c:	080044ac 	.word	0x080044ac
 8004470:	080044b0 	.word	0x080044b0

08004474 <_init>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr

08004480 <_fini>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr
